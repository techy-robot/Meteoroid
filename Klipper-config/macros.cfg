#The exception to these macros stored in here is the PA_CAL stored in advanced tuning, heatsoak code from a knowledgable person on github, and the ones stored in mainsail
#So the macros required by mainsail are with it


# ================================================================================
# GCode Macros:
# These macros intercept gcode and replace them with the macro defined.
# GCode WIKI: https://reprap.org/wiki/G-code
# ================================================================================

[include heatsoak.cfg]

[save_variables]
filename: ~/printer_data/config/variables.cfg # variable storage file

# ================================================================================
# GCode Macro: START_PRINT
# Add START_PRINT in your slicers starting script. 
# ================================================================================
[gcode_macro START_PRINT]
description: Add START_PRINT in your slicers starting script. 
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}
    M140 S{BED_TEMP} ; start bed temp
    M104 S{EXTRUDER_TEMP-50} ; start pre-heating extruder
    M190 S{BED_TEMP} ; wait for bed temperature
    M204 S350
    G28.1 ; Home if needed
    Z_TILT_ADJUST
    LEVEL_BED_ADVANCED MAX_AGE=20 ; probe mesh every 20 prints.

    # WIPE_NOZZLE_ON_BRUSH ;
    # WIPE_NOZZLE_ON_BRUSH ;
    G1 X180 Y-4 F5000.0 ; Move to edge of bed
    M104 S{EXTRUDER_TEMP} ; heat to printing temperature
    M109 S{EXTRUDER_TEMP} ; wait for extruder temp
    SOUND_CHARGE
    
    PURGE_NOZZLE_ON_BED ;
    # WIPE_NOZZLE_ON_BRUSH ;

    SKEW_PROFILE LOAD=default_skew ;

    #G1 X0.1 Y20 Z0.3 F5000.0; Move to start position for purge line
    #G1 X0.1 Y200.0 Z0.3 F1500.0 E15; Draw the first line
    #G1 X0.4 Y200.0 Z0.3 F5000.0; Move to side a little
    #G1 X0.4 Y20 Z0.3 F1500.0 E30; Draw the second line
    #G92 E0; Reset Extruder
    #G1 X5 Z5.0 F3000; Move Z Axis up little to prevent scratching of Heat Bed
    
# ================================================================================
# GCode Macro: END_PRINT
# Add END_PRINT in your slicers ending script
# ================================================================================
[gcode_macro END_PRINT]
description: Add END_PRINT in your slicers ending script
gcode:
    SET_SKEW CLEAR=1 ; 
    G91 ; Relative positioning
    M204 S350
    G1 Z10 E-10 F3000; Move up & retract
    G90 ; Absolute pos.
    G1 X225 Y0
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    
    G1 Z300
    SOUND_MARIO_FLAG
    
    # EJECT_PART ; 
    M84 ; Disable steppers
    SAVE_IF_SET      ; SAVE_CONFIG if a mesh was probed in START_PRINT

# ================================================================================
# GCode Macro: EJECT_PART
# This is NOT designed for a fixed bed printer, so I have removed it
# ================================================================================
[gcode_macro EJECT_PART]
description: This runs a nozzle with a big block on it up and down the bed.
gcode:

    M140 S0.0 ; waits for bed to cool to 27 C to eject parts
    TEMPERATURE_WAIT SENSOR=heater_bed MAXIMUM=27

    # Start next print

# ================================================================================
# Gcode G28 macro to home only if needed
# ================================================================================
[gcode_macro G28.1]
description: Gcode G28 macro to home only if needed
gcode:
  {% if printer.toolhead.homed_axis != "xyz" %}
    G28
  {% endif %}


# ================================================================================
# GCode Macro G29
# Fires BED_MESH_CALIBRATE when G29 is sent to the printer
# ================================================================================
[gcode_macro G29]
description: Fires BED_MESH_CALIBRATE when G29 is sent to the printer
gcode:
    BED_MESH_CALIBRATE

[gcode_arcs]


# ================================================================================
# GCode Macro: PURGE_NOZZLE_ON_BED
# Wipes nozzle on the edge of the print bed. This extrudes filament over the edge of the bed and then wipes it on the bed
# ================================================================================
[gcode_macro PURGE_NOZZLE_ON_BED]
description: Wipes nozzle on the edge of the print bed by extruding dangling filament and then running close to the bed.
gcode:
    G92 E0;reset extruder
    G1 X223 Y-4 F5000.0; Move to edge of bed
    G1 E20 F300.0; unretract filament and purge nozzle
    G4 P500; wait for filament to drool
    G1 Z0.1 F5000.0; lower nozzle
    G1 Y40 F2000.0; wipe nozzle on edge
    G1 Z1.0 F3000; Move Z Axis up little to prevent scratching of Heat Bed
    G92 E0;reset extruder

# ================================================================================
# GCode Macro: WIPE_NOZZLE_ON_BRUSH
# Wipes nozzle on the brush. I DON'T HAVE ONE YET
# ================================================================================
[gcode_macro WIPE_NOZZLE_ON_BRUSH]
description: Wipes nozzle on the brush.
gcode:
    # G1 X25 Y-10 F5000.0;
    # G1 Z-1.9 F3000.0; moving to edge and lower nozzle near brush
    # G1 X0 F6000.0; One stroke
    # G1 Y-15 F6000.0; move to max
    # G1 X25 F6000.0; Another stroke.
    # G1 Z1.0 F3000; Move Z Axis up little to prevent scratching of Heat Bed. The cooling duct is awfully close to bed.

    {% set zigzag_count = 8 %}
    G90
    G1 X25 Y-8 F5000.0; Start location
    G1 Z-1.9 F3000.0; lower nozzle

    {% for wipe in range(zigzag_count) %}
      {% for coordinate in [(25, -8),(25, -13)] %}
        G1 X{coordinate[0] - (coordinate[0] / zigzag_count) * wipe} Y{coordinate[1]} F3000.0; does a zigzag patern.
      {% endfor %}
    {% endfor %}

    G1 Y-15 F6000.0; move out of brush.
    G1 Z1.0 F3000; Move Z Axis up little to prevent scratching of Heat Bed. The cooling duct is awfully close to bed.

[gcode_macro G12]
description: Wipes nozzle on the brush.
gcode:
    WIPE_NOZZLE_ON_BRUSH

[gcode_macro M300]
description: Common marlin beeper support. P is duration, S is tone frequency
variable_volume: 0.01
gcode:
    # use a default 1khz tone if S is omitted
    {% set S = params.S|default(1000)|int %}
    # use default 10ms duration
    {% set P = params.P|default(10)|int %}

    SET_PIN PIN=beeper VALUE={printer["gcode_macro M300"].volume} CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    G4 P{P}
    SET_PIN PIN=beeper VALUE=0
    

[gcode_macro M300.1]
description: Unsafe beeper. P is duration, S is tone frequency. This does not turn off the speaker unless you specify 0 to value.
gcode:
    # use a default 1khz tone if S is omitted
    {% set S = params.S|default(1000)|int %}
    # use default of 0, to prevent potential problems
    {% set P = params.P|default(0)|int %}
    
    {% if P == 0 or S == 0 %}
      SET_PIN PIN=beeper VALUE=0
    {% else %}
      SET_PIN PIN=beeper VALUE={printer["gcode_macro M300"].volume} CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    {% endif %}
    G4 P{P}

[gcode_macro SET_PRESSURE_ADVANCE]
description: Supports variable pressure advance on move. Whenever this is set the varible is saved as original PA
rename_existing: SET_PRESSURE_ADVANCE_NORMAL
variable_advance: 0.1
gcode:
    {% set p=[] %}
    {% for key in params %}
      {% set p = p.append(key + params[key]) %}
    {% endfor %}
    {% if params.ADVANCE is defined %}
      SET_GCODE_VARIABLE MACRO=SET_PRESSURE_ADVANCE VARIABLE=advance VALUE={params.ADVANCE}
    {% endif %}
    SET_PRESSURE_ADVANCE_NORMAL {rawparams}

# Doesn't work well. Variable pressure advance should be a slicer determined thing using custom code there. It will be much less frequent than this macro here.
# All that is really needed is a change for each line type/speed, not a change every single move.
#[gcode_macro G1]
#description: Add variable pressure advance based on speed and the original value to G1
#rename_existing: G99999
#gcode:
#    {% set p=[] %}
#    {% for key in params %}
#      {% set p = p.append(key + params[key]) %}
#    {% endfor %}
#    {% if params.F is defined %}
#      {% set speed = params.F|int/60 %}
#      {% set orig_pa = printer["gcode_macro SET_PRESSURE_ADVANCE"].advance|float %}
#      {% set pa = ([orig_pa * ( 150 / speed ), orig_pa]|min) %} #limit PA to max of original value. Better to have lower PA than higher due to underextrusion.
#      SET_PRESSURE_ADVANCE_NORMAL ADVANCE={pa}
#    {% endif %}
#    G99999 { p|join(" ") }

    

# This is where the magic happens:
# MAX_AGE is checked against the stored variable
# SAVE=1 can be used to force saving the mesh (restarts klipper, so
#        only for manual usage)
# FORCE_LEVEL=1 forces a mesh probe even if MAX_AGE is not reached
[gcode_macro LEVEL_BED_ADVANCED]
description: Levels the bed if the last leveling was MAX_AGE runs ago. Force leveling by setting FORCE
variable_save_at_end: 0
gcode:
  {% set max_age = params.MAX_AGE|default(10)|int %}
  {% set force_level = params.FORCE|default(0)|int %}
  {% set save = params.SAVE|default(0)|int %}

  # load level_age from stored variables
  {% set svv = printer.save_variables.variables %}
  {% if "level_age" not in svv %} # first run
    SAVE_VARIABLE VARIABLE=level_age VALUE={max_age}
    {% set level_age = 1 %}
  {% else %} # load level_age and increment
    {% set level_age = svv.level_age %}
    SAVE_VARIABLE VARIABLE=level_age VALUE={level_age|int + 1}
  {% endif %}
  {action_respond_info("Bed mesh age is " + level_age|string) + "."} 

  # Level eventually
  {% if force_level or (level_age >= max_age|int) %}
    {action_respond_info("Bed mesh exceeded max age. Leveling...")} 

    # homing if not homed yet
    {% if 'xy' not in printer.toolhead.homed_axes %}
    G28
    {% endif %}
  
    BED_MESH_CALIBRATE
    {% if save %}
      SAVE_VARIABLE VARIABLE=level_age VALUE=1 # reset counter
      SAVE_CONFIG
    {% else %}
      SET_GCODE_VARIABLE MACRO=LEVEL_BED_ADVANCED VARIABLE=save_at_end VALUE=1
    {% endif %}
  {% else %}
    {action_respond_info("Loading old bed mesh.")} 
    BED_MESH_PROFILE LOAD=default
  {% endif %} 

# runs SAVE_CONFIG if the g-code variable was set in start gcode
[gcode_macro SAVE_IF_SET]
gcode:
  {% if printer["gcode_macro LEVEL_BED_ADVANCED"].save_at_end == 1 %}
  {action_respond_info("Saving was requested - saving and restarting now.")}
  SAVE_VARIABLE VARIABLE=level_age VALUE=1
  SAVE_CONFIG
  {% endif %}


#[filament_switch_sensor RunoutSensor]
#pause_on_runout: False
#runout_gcode: PAUSE
#insert_gcode: RESUME
#switch_pin: !PC2

[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}